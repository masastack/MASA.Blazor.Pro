@page "/todo/{filter?}"
@using Masa.Blazor.ProApp.Rcl.Data
@using Masa.Blazor.ProApp.Rcl.Models
@inject ProDatabase ProDatabase

<PageTitle>To do</PageTitle>

<div class="d-flex align-center mb-4">
    <MButton Class="mr-1" Icon OnClick="@(() => _drawer = !_drawer)">
        <MIcon>mdi-menu</MIcon>
    </MButton>
    <span class="text-capitalize">@Category</span>
    <MSpacer/>
    <MButton Icon>
        <MIcon>mdi-sort</MIcon>
    </MButton>
    <MButton Icon>
        <MIcon>mdi-dots-horizontal</MIcon>
    </MButton>
</div>

<MExpansionPanels Multiple Accordion @bind-Values="_expandedPriority">
    @foreach (var item in _tasks.GroupBy(t => t.Priority))
    {
        <MExpansionPanel Value="(int)item.Key" Class="mb-4 rounded-lg">
            <MExpansionPanelHeader>@item.Key</MExpansionPanelHeader>
            <MExpansionPanelContent>
                <MList Dense Class="py-0">
                    @foreach (var task in item)
                    {
                        <MListItem>
                            <MListItemAction Class="mr-2">
                                <MSimpleCheckbox Color="primary" Ripple="false" Value="@task.Completed" ValueChanged="@(() => CompleteTask(task))"/>
                            </MListItemAction>
                            <MListItemContent>
                                <MListItemTitle>@task.Title</MListItemTitle>
                                @if (!string.IsNullOrWhiteSpace(task.Description))
                                {
                                    <MListItemSubtitle>@task.Description</MListItemSubtitle>
                                }
                            </MListItemContent>
                        </MListItem>
                    }
                </MList>
            </MExpansionPanelContent>
        </MExpansionPanel>
    }
</MExpansionPanels>
<MBottomSheet @bind-Value="_newTaskSheet"
              ContentClass="px-4 py-2">
    <ActivatorContent>
        <MButton Fixed Right Fab Color="primary"
                 Style="bottom: 72px;"
                 @attributes="@context.Attrs">
            <MIcon>mdi-plus</MIcon>
        </MButton>
    </ActivatorContent>
    <ChildContent>
        <MForm Model="_todoTask"
               EnableValidation
               OnValidSubmit="HandleOnSubmit">
            <MTextField @bind-Value="@_todoTask.Title"
                        Class="my-2"
                        Dense
                        Filled
                        Rounded
                        HideDetails="true"
                        Placeholder="Title"
                        PersistentPlaceholder
                        AutoFocus="@_newTaskSheet">
            </MTextField>

            <MTextarea @bind-Value="@_todoTask.Description"
                       Dense
                       Filled
                       Rounded
                       HideDetails="true"
                       Placeholder="Description"
                       PersistentPlaceholder>
            </MTextarea>

            <div Class="d-flex align-center my-2">
                <MButton Color="secondary"
                         Text
                         OnClick="@(() => _calendarSheet = true)">
                    <MIcon Left>mdi-calendar-today-outline</MIcon>
                    @GetAliasOfDueAt()
                </MButton>
                <MMenu OffsetY Top>
                    <ActivatorContent Context="menuContext">
                        <MButton Color="@PriorityColor"
                                 Icon
                                 @attributes="@menuContext.Attrs">
                            <MIcon>mdi-flag-variant-outline</MIcon>
                        </MButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MList Dense>
                            @foreach (var (priority, color) in Priorities)
                            {
                                <MListItem OnClick="@(() => _todoTask.Priority = priority)">
                                    <MIcon Color="@color" Class="mr-1">mdi-flag-variant-outline</MIcon>
                                    <MListItemTitle>@priority</MListItemTitle>
                                </MListItem>
                            }
                        </MList>
                    </ChildContent>
                </MMenu>
                <MSpacer/>
                <MButton Icon Color="primary" Type="submit">
                    <MIcon>mdi-arrow-up-circle</MIcon>
                </MButton>
            </div>
        </MForm>
    </ChildContent>
</MBottomSheet>

<DateDigitalClockSheet @bind-Value="_todoTask.DueAt"
                       @bind-Show="_calendarSheet"/>

<TodoNav @bind-Value="_drawer"/>

@code {

    private static List<(TodoTaskPriority priority, string? color)> Priorities =
    [
        (TodoTaskPriority.High, "red"),
        (TodoTaskPriority.Medium, "orange"),
        (TodoTaskPriority.Low, "blue"),
        (TodoTaskPriority.Default, null)
    ];

    private bool? _drawer = false;
    private bool _newTaskSheet;
    private bool _calendarSheet;
    private int _page = 1;
    private int _pageSize = 10;
    private List<TodoTask> _tasks = new();

    private List<StringNumber> _expandedPriority = [0, 1, 2, 3, -1];

    private string Category => Filter ?? "Today";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTasks();
            StateHasChanged();
        }
    }

    private async Task LoadTasks()
    {
        _tasks = Filter?.ToLowerInvariant() switch
        {
            "inbox" => await ProDatabase.GetTasksAsync(_page, _pageSize),
            _ => await ProDatabase.GetTasksAsync(_page, _pageSize, DateTime.Today),
        };
    }

    private string? PriorityColor => _todoTask.Priority switch
    {
        TodoTaskPriority.High => "red",
        TodoTaskPriority.Medium => "orange",
        TodoTaskPriority.Low => "blue",
        _ => null
    };

    private TodoTask _todoTask = new();

    [Parameter] public string? Filter { get; set; }

    private async Task HandleOnSubmit()
    {
        // TODO: Save the task

        await ProDatabase.CreateTaskAsync(_todoTask);

        _newTaskSheet = false;
    }

    private string GetAliasOfDueAt()
    {
        var dateStr = GetDateStr();
        return _todoTask.DueAt.TimeOfDay == TimeSpan.Zero
            ? dateStr
            : $"{dateStr}, {_todoTask.DueAt.ToShortTimeString()}";

        string GetDateStr()
        {
            var today = DateTime.Today;
            var dueAt = _todoTask.DueAt.Date;

            if (dueAt == today)
            {
                return "Today";
            }

            if (dueAt == today.AddDays(-1))
            {
                return "Yesterday";
            }

            if (dueAt == today.AddDays(1))
            {
                return "Tomorrow";
            }

            if (dueAt.Year == DateTime.Today.Year)
            {
                return dueAt.ToString("M");
            }

            return dueAt.ToShortDateString();
        }
    }

    private async Task CompleteTask(TodoTask task)
    {
        task.Completed = !task.Completed;
        await ProDatabase.UpdateTaskAsync(task);
    }

}